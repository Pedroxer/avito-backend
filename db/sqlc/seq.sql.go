// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: seq.sql

package sqlc

import (
	"context"
)

const createSeg = `-- name: CreateSeg :one
INSERT INTO "segments" (name) values ($1) RETURNING id, name
`

func (q *Queries) CreateSeg(ctx context.Context, name string) (Segment, error) {
	row := q.db.QueryRowContext(ctx, createSeg, name)
	var i Segment
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteSeg = `-- name: DeleteSeg :exec
DELETE FROM "segments" where id = $1
`

func (q *Queries) DeleteSeg(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeg, id)
	return err
}

const getSeg = `-- name: GetSeg :one
SELECT id, name FROM "segments" where id = $1
`

func (q *Queries) GetSeg(ctx context.Context, id int64) (Segment, error) {
	row := q.db.QueryRowContext(ctx, getSeg, id)
	var i Segment
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateSeg = `-- name: UpdateSeg :exec
UPDATE "segments" SET name = $2 where id = $1
`

type UpdateSegParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateSeg(ctx context.Context, arg UpdateSegParams) error {
	_, err := q.db.ExecContext(ctx, updateSeg, arg.ID, arg.Name)
	return err
}
